name: Frontend CD

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Frontend to Azure VM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1) Azure login via OIDC
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 2) ACR login via Azure CLI
      - name: Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      # 3) Build and push Docker image to ACR
      - name: Build & Push Frontend Image
        run: |
          IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE

      # 4) SSH into VM and deploy with docker-compose
      - name: SSH & Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key:      ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ ! -d "frontend" ]; then
              mkdir frontend
              cd frontend
              git init
              git remote add origin https://github.com/mrtaz77/career-studio-frontend.git
            else
              cd frontend
            fi

            # Pull the latest changes from the repository
            git fetch origin
            git reset --hard origin/main

            # Create the .env.production file with environment variables
            cat <<EOF > .env.production
            ENVIRONMENT=production
            VITE_API_BASE_URL=/api
            VITE_BASE_URL=/
            VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY }}
            VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
            VITE_FIREBASE_PROJECT_ID=${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
            VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
            VITE_FIREBASE_APP_ID=${{ secrets.VITE_FIREBASE_APP_ID }}
            VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
            EOF
            chmod 600 .env.production

            # Ensure secrets directory exists and populate it with secret files
            if [ -d "secrets" ]; then
              rm -rf secrets/*
            else
              mkdir -p secrets
            fi
            echo -n "${{ secrets.VITE_FIREBASE_API_KEY }}" > secrets/firebase_api_key
            echo -n "${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}" > secrets/firebase_auth_domain
            echo -n "${{ secrets.VITE_FIREBASE_PROJECT_ID }}" > secrets/firebase_project_id
            echo -n "${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}" > secrets/firebase_storage_bucket
            echo -n "${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}" > secrets/firebase_messaging_sender_id
            echo -n "${{ secrets.VITE_FIREBASE_APP_ID }}" > secrets/firebase_app_id
            echo -n "${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}" > secrets/firebase_measurement_id
            echo -n "/api" > secrets/api_base_url

            # Pull the latest Docker image and restart the frontend service
            docker compose pull frontend
            docker compose up -d frontend

            # Prune unused Docker images to save space
            docker image prune -f
